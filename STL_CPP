#include<bits/stdc++.h> 
// #include<iostream>
using namespace std;

void explainPair(){
    // pair<int, int> p = {1, 3};

    // cout<< p.first << " " <<p.second<<endl;

    pair<int, pair<int, int>> p = {1, {2, 3}};

    cout<<p.first<<" "<<p.second.second<<" "<<p.second.first<<endl;

    pair<int, int> arr[] = {{1, 2}, {2, 5}, {3, 6}};

    cout<<arr[1].second<<endl;-
}

void explainVector(){
    // vector<int>v;             // use singly linklist

    // v.push_back(2);
    // v.emplace_back(3);  // it faster operation then the push_back

    vector<pair<int, int>>vec;

    vec.push_back({1, 2});
    vec.emplace_back(1, 2);

    vector<int> v(5, 100);  

    vector<int>v(5);      // v = {0, 0, 0, 0, 0}; or {garbage value, gv, gv, gv, gv};

    vector<int>v1(5, 20);  //-> {20, 20, 20, 20, 20}
    vector<int>v2(v1);  
    
    
    vector<int>::iterator it = v.begin();    // it -> point to the memory location

    it++;
    cout<<*(it)<<" ";

    it = it * 2;
    cout<<*(it)<<" ";

    vector<int>::iterator it = v.end();    // {10, 20, 30, 40, 50} ^ here point

    vector<int>::iterator it = v.rend();   // here point ^ {10, 20, 30, 40, 50}   reverese end

    vector<int>::iterator it = v.rbegin(); // {10, 20, 30, 40, 50 ^ here point}  ,if it++ will be  {10, 20, 30, 40 ^ here, 50}

    cout<< v[0] << v.at(0);

    cout<< v.back() << " ";  // last element

    for(vector<int>::iterator it = v.begin(); it != v.end(); i++){
        cout<<*(it)<<" ";
    }

    for(auto it = v.begin(); it != v.end(); i++){
        cout<<*(it)<<" ";
    }

    for(auto it: v){
        cout<< it <<" ";
    }

    // {10, 20, 12, 23}
    v.erase(v.begin()+1);  // {10, 12, 23}

    // {10, 20, 12, 23, 35}
    v.erase(v.begin()+2, v.begin()+4);    //  [2, 4)  erase [start, end) -> {10, 20, 35}

    //Insert function

    vector<int>v(2, 100);      // {100, 100}
    v.insert(v.begin(), 300);  // {300, 100, 100}
    v.insert(v.begin()+1, 2, 10); // {300, 10, 10, 100, 100}

    vector<int> copy{2, 50}; // {50, 50}
    v.insert(v.begin(), copy.begin(), copy.end()); // {50, 50, 300, 10, 10, 100, 100}
    
    // {10, 20}
    cout<<v.size(); // 2

    // v1-> {10, 20}
    // v2-> {30, 40}
    v1.swap(v2); // v1 -> {30, 40}, v2 -> {10, 20}

    v.clear(); // erase the entire vector

    cout<<v.empty();
}

void explainList(){
    list<int> ls;           // uses doubly linklist
    ls.push_back(2); //{2}
    ls.emplace_back(4); // {2,4}

    ls.push_front(5); // {5, 2, 4}

    ls.emplace_front(6); //{6, 5, 2, 4}

    ls.emplace_back(8); ls.push_back(9);

    ls.front(); ls.back();

    //rest function same as vector
    // begin, end, rbegin, rend, clear, insert, size, swap
}



void explainDeque(){
    deque<int>dq;
    dq.push_back(1);
    dq.emplace_back(2); // {1, 2};
    dq.push_front(4); 
    dq.emplace_front(3); // {3, 4, 1, 2}

    dq.pop_back();  // {3, 4, 1}
    dq.pop_front(); // {4, 1};

    dq.back();
    dq.front();

    // rest function same as vector
    // begin, end, rbegin, rend, clear, insert, size, swap
}

void explainStack(){        // Lifo
    stack<int> st;
    st.push(1); // {1}
    st.push(2);
    st.push(3);
    st.push(3);
    st.emplace(5); // {5, 3, 3, 2, 1}

    cout<< st.top(); // print 5

    st.pop();

    cout<<st.top(); // 3

    cout<< st.size(); // 4

    cout<< st.empty(); // true or flase
    
    stack<int> st1, st2;

    st1.swap(st2);
}

void explainQueue(){
    queue<int> q;
    q.push(1);
    q.push(2);

    q.back() += 5;

    cout<< q.back(); // print 9

    // 0 is  {1, 2, 9}
    cout<< q.front(); // print 1

    q.pop(); // {2, 9};

    cout<< q.front(); // print 2

    // size,swap , empty same as stack
}

void explainPQ(){                                       // push, pop : log(n), top: O(1)
    priority_queue<int> pq;        // max heap          

    pq.push(5); // {5}
    pq.push(2);  // {5, 2}
    pq.push(8);   // {8, 5, 2}
    pq.emplace(10); // {10, 8, 5, 2}

    cout<< pq.top();  //  print 10

    pq.pop(); // {8, 5, 2}

    cout<<pq.top(); // print 8

    priority_queue<int, vector<int>, greater<int>> pq;   // min heap
    pq.push(5); // {5}
    pq.push(2); // {2, 5}
    pq.push(8);
    pq.emplace(10); // {2, 5, 8, 10}

    cout<<pq.top(); // print 2
}

void explainSet(){    // sorted and unique                  // everthing happen in :  log(n)
                    // entirly tree is maintain
    set<int> st;
    st.insert(1);
    st.emplace(2);  // {1, 2}
    st.insert(2);   // {1, 2}
    st.insert(4);   
    st.insert(3);

    // functionality of insert in vector
    // can be used also, that only increases
    // efficiency

    // begin(), end(), rbegin(), rend(), size(),
    // empty() and swap() are same as those of above

    // {1, 2, 3, 4, 5}
    auto it = st.find(3);   // iterator

    // {1, 2, 3, 4, 5}
    auto it  = st.find(6);

    // {1, 4, 5}
    st.erase(5); // erase 5 // it takes constant time

    int cnt = st.count(1);

    auto it = st.find(1);
    st.erase(it); // it takes constant time

    // {1, 2, 3, 4, 5}
    auto it1 = st.find(2);
    auto it2 = st.find(4);
    st.erase(it1, it2); // after erase {1, 4, 5} [first, end)

    // lower_bound() and upper_bound() function works in the same way
    // as in vector it does.

    //This is the syntax
    auto it  = st.lower_bound(2);

    auto it = st.upper_bound(3);
}

void explainMultiSet(){             // sorted but can carry duplicate also
    // Everything is same as set
    // only stores duplicate elements elements also

    multiset<int>ms;
    ms.insert(1);  // {1}
    ms.emplace(1); // {1, 1}
    ms.insert(1); // {1, 1, 1}

    ms.erase(1); // all 1's erased

    int cnt = ms.count(1);

    // only single one is erased
    ms.erase(ms.find(1));

    ms.erase(ms.find(1), ms.find(1)+2);

    //rest all function same as set
}

void explainUSet() {             // unique, but X not sorted   
    unordered_set<int> st;       // O(1), worst case: O(n)
    // lower_bound and upper_bound function
    // does not works, rest all function are same
    // as above, it does not stores in any
    // particular order it has a better complexity
    // then set in most cases, except some when collision happen
}

void explainMap(){          // store {key, value}
                            //  key are (unique) in sorted order (similar to set data structure)
    map<int, int> mpp;

    map<int, pair<int, int>> mpp;

    map< pair<int, int>, int> mpp;

    mpp[1] = 2;
    mpp.emplace({3, 1});

    mpp.insert({2, 4});

    mpp[{2,3}] = 10;

    {
        {1, 2}
        {2, 4}
        {3, 1}
    }

    for(auto it : mpp){
        cout<< it.first << " " << it.second <<endl;
    }

    cout<< mpp[1];
    cout<< mpp[5];

    auto it = mpp.find(3);
    cout<< *(it).second;

    auto it = mpp.find(5);

    // This is the syntax 
    auto it = mpp.lower_bound(2);

    auto it = mpp.upper_bound(3);

    // erase, swap, size, empty, are same as above
}

void explainMultimap(){
    // every thig same as map, only it can store multiple keys
    // only mpp{key} cannot be used here
}

void explainUnorderedMap(){    
    //same as set and unordered_Set difference
}


void explainExtrta(){

    sort(a, a+n);   // array
    sort(v.begin(), v.end());  // vector

    sort(a+2, a+4);

    sort(a, a+n, greater<int>);

    pair<int, int> a[] = {{1,2}, {2,1}, {4,1}};

    // sort it according to second element
    // if second element is same, then sort
    // it according to first element but in descending
}
 
int main(){

    // explainPair();

    explainVector();


    return 0;
}
